{"version":3,"sources":["Info.js","App.js","serviceWorker.js","index.js"],"names":["Info","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showMeme","message","setState","memeMessage","alert","state","timeOfDay","fact","quote","author","tOD","h","Date","getHours","fetch","factOfDay","json","jsonFOD","quoteOfDay","jsonQOD","text","contents","quotes","loadAPI","setTimeOfDay","react_default","a","createElement","className","lib_default","format","ticking","timezone","type","onClick","Component","App","src_Info_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UAuFeA,cAlFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA6BFI,SAAW,WACT,IAAMC,EAAU,6nBAChBR,EAAKS,SAAS,CACZC,YAAaF,IAEfG,MAAMH,IAhCNR,EAAKY,MAAQ,CACXC,UAAW,GACXC,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRN,YAAa,IARHV,8EAaZ,IAEIiB,EADAC,GADU,IAAIC,MACJC,WAGZH,EADEC,EAAI,GAAKA,EAAI,GACT,UAECA,EAAI,IAAMA,EAAI,GACf,YAGA,UAERf,KAAKM,SAAS,CACZI,UAAWI,0KAaWI,MAAM,iHAAxBC,kBACgBA,EAAUC,qBAA1BC,kBACmBH,MAAM,6CAAzBI,mBACgBA,EAAWF,eAA3BG,SACNvB,KAAKM,SAAS,CACZK,KAAMU,EAAQG,KACdZ,MAAOW,EAAQE,SAASC,OAAO,GAAGd,MAClCC,OAAQU,EAAQE,SAASC,OAAO,GAAGb,gQAKrCb,KAAK2B,UACL3B,KAAK4B,kJAIL,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OACZH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,QACQhC,KAAKS,MAAMC,UADnB,4BAGAmB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAJR,gBAMEF,EAAAC,EAAAC,cAAA,WACC/B,KAAKS,MAAME,KACZkB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOI,OAAQ,QAASC,SAAS,EAAMC,SAAU,aAAcJ,UAAU,UACzEH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,IACIhC,KAAKS,MAAMG,MADf,IAEEiB,EAAAC,EAAAC,cAAA,WAFF,KAGK/B,KAAKS,MAAMI,SAGlBgB,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,SAASM,QAAStC,KAAKI,UAAvD,SACCJ,KAAKS,MAAMJ,gBA7EHkC,aCUJC,mLARX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ede94ca4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Info.css';\nimport Clock from 'react-live-clock';\n\nclass Info extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      timeOfDay: \"\",\n      fact: \"\",\n      quote: \"\",\n      author: \"\",\n      memeMessage: \"\"\n    };\n  }\n\n  setTimeOfDay() {\n    const today = new Date();\n    let h = today.getHours();\n    let tOD;\n    if (h > 6 && h < 12) {\n      tOD = \"morning\";\n    }\n    else if (h > 12 && h < 20) {\n      tOD = \"afternoon\";\n    }\n    else {\n      tOD = \"evening\";\n    }\n    this.setState({\n      timeOfDay: tOD\n    })\n  }\n\n  showMeme = () => {\n    const message = \" ∧＿∧\\n( ･ω･｡)つ━☆・*。\\n⊂　 ノ 　　　・゜+.\\nしーＪ　　　°。+ *´¨)\\n　　　　　　　　　.· ´¸.·*´¨) ¸.·*¨)\\n　　　　　　　　　　(¸.·´ (¸.·'* ☆ \\n\\ncongrats! you found the hidden magic cat. you have been blessed with good luck for the rest of the day. go chance your dreams and shoot your shots!\\n\\n*disclaimer* finding the magic cat does not guarantee good luck for the rest of the day.\"\n    this.setState({\n      memeMessage: message\n    });\n    alert(message);\n  }\n\n  async loadAPI() {\n    const factOfDay = await fetch(\"https://cors-anywhere.herokuapp.com/http://randomuselessfact.appspot.com/today.json?language=en\");\n    const jsonFOD = await factOfDay.json();\n    const quoteOfDay = await fetch(\"http://quotes.rest/qod.json\");\n    const jsonQOD = await quoteOfDay.json();\n    this.setState({\n      fact: jsonFOD.text,\n      quote: jsonQOD.contents.quotes[0].quote,\n      author: jsonQOD.contents.quotes[0].author,\n    });\n  }\n\n  async componentDidMount() {\n    this.loadAPI();\n    this.setTimeOfDay();\n  }\n\n  render() {\n    return (\n      <body className=\"App\">\n          <p>\n            <div className=\"title\">\n              good {this.state.timeOfDay}! here's your daily tea:\n            </div>\n            <br /><br />\n            Did You Know?\n            <br/>\n            {this.state.fact}\n            <br /><br /><br />\n            <Clock format={'HH:mm'} ticking={true} timezone={'US/Pacific'} className=\"clock\"/>\n            <br /><br /><br />\n            <div className=\"quote\">\n              \"{this.state.quote}\"\n              <br />\n              - {this.state.author}\n            </div>\n          </p>\n          <button type=\"button\" className=\"button\" onClick={this.showMeme}>¿?</button>\n          {this.state.message}\n      </body>\n    );\n  }\n}\n\nexport default Info;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Info from './Info.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Info />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}